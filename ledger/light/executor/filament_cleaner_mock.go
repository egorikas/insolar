package executor

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock"
	"github.com/insolar/insolar/insolar"
)

// FilamentCleanerMock implements executor.FilamentCleaner
type FilamentCleanerMock struct {
	t minimock.Tester

	funcClear          func(objID insolar.ID)
	inspectFuncClear   func(objID insolar.ID)
	afterClearCounter  uint64
	beforeClearCounter uint64
	ClearMock          mFilamentCleanerMockClear
}

// NewFilamentCleanerMock returns a mock for executor.FilamentCleaner
func NewFilamentCleanerMock(t minimock.Tester) *FilamentCleanerMock {
	m := &FilamentCleanerMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ClearMock = mFilamentCleanerMockClear{mock: m}
	m.ClearMock.callArgs = []*FilamentCleanerMockClearParams{}

	return m
}

type mFilamentCleanerMockClear struct {
	mock               *FilamentCleanerMock
	defaultExpectation *FilamentCleanerMockClearExpectation
	expectations       []*FilamentCleanerMockClearExpectation

	callArgs []*FilamentCleanerMockClearParams
	mutex    sync.RWMutex
}

// FilamentCleanerMockClearExpectation specifies expectation struct of the FilamentCleaner.Clear
type FilamentCleanerMockClearExpectation struct {
	mock   *FilamentCleanerMock
	params *FilamentCleanerMockClearParams

	Counter uint64
}

// FilamentCleanerMockClearParams contains parameters of the FilamentCleaner.Clear
type FilamentCleanerMockClearParams struct {
	objID insolar.ID
}

// Expect sets up expected params for FilamentCleaner.Clear
func (mmClear *mFilamentCleanerMockClear) Expect(objID insolar.ID) *mFilamentCleanerMockClear {
	if mmClear.mock.funcClear != nil {
		mmClear.mock.t.Fatalf("FilamentCleanerMock.Clear mock is already set by Set")
	}

	if mmClear.defaultExpectation == nil {
		mmClear.defaultExpectation = &FilamentCleanerMockClearExpectation{}
	}

	mmClear.defaultExpectation.params = &FilamentCleanerMockClearParams{objID}
	for _, e := range mmClear.expectations {
		if minimock.Equal(e.params, mmClear.defaultExpectation.params) {
			mmClear.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmClear.defaultExpectation.params)
		}
	}

	return mmClear
}

// Inspect accepts an inspector function that has same arguments as the FilamentCleaner.Clear
func (mmClear *mFilamentCleanerMockClear) Inspect(f func(objID insolar.ID)) *mFilamentCleanerMockClear {
	if mmClear.mock.inspectFuncClear != nil {
		mmClear.mock.t.Fatalf("Inspect function is already set for FilamentCleanerMock.Clear")
	}

	mmClear.mock.inspectFuncClear = f

	return mmClear
}

// Return sets up results that will be returned by FilamentCleaner.Clear
func (mmClear *mFilamentCleanerMockClear) Return() *FilamentCleanerMock {
	if mmClear.mock.funcClear != nil {
		mmClear.mock.t.Fatalf("FilamentCleanerMock.Clear mock is already set by Set")
	}

	if mmClear.defaultExpectation == nil {
		mmClear.defaultExpectation = &FilamentCleanerMockClearExpectation{mock: mmClear.mock}
	}

	return mmClear.mock
}

//Set uses given function f to mock the FilamentCleaner.Clear method
func (mmClear *mFilamentCleanerMockClear) Set(f func(objID insolar.ID)) *FilamentCleanerMock {
	if mmClear.defaultExpectation != nil {
		mmClear.mock.t.Fatalf("Default expectation is already set for the FilamentCleaner.Clear method")
	}

	if len(mmClear.expectations) > 0 {
		mmClear.mock.t.Fatalf("Some expectations are already set for the FilamentCleaner.Clear method")
	}

	mmClear.mock.funcClear = f
	return mmClear.mock
}

// Clear implements executor.FilamentCleaner
func (mmClear *FilamentCleanerMock) Clear(objID insolar.ID) {
	mm_atomic.AddUint64(&mmClear.beforeClearCounter, 1)
	defer mm_atomic.AddUint64(&mmClear.afterClearCounter, 1)

	if mmClear.inspectFuncClear != nil {
		mmClear.inspectFuncClear(objID)
	}

	params := &FilamentCleanerMockClearParams{objID}

	// Record call args
	mmClear.ClearMock.mutex.Lock()
	mmClear.ClearMock.callArgs = append(mmClear.ClearMock.callArgs, params)
	mmClear.ClearMock.mutex.Unlock()

	for _, e := range mmClear.ClearMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return
		}
	}

	if mmClear.ClearMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmClear.ClearMock.defaultExpectation.Counter, 1)
		want := mmClear.ClearMock.defaultExpectation.params
		got := FilamentCleanerMockClearParams{objID}
		if want != nil && !minimock.Equal(*want, got) {
			mmClear.t.Errorf("FilamentCleanerMock.Clear got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		return

	}
	if mmClear.funcClear != nil {
		mmClear.funcClear(objID)
		return
	}
	mmClear.t.Fatalf("Unexpected call to FilamentCleanerMock.Clear. %v", objID)

}

// ClearAfterCounter returns a count of finished FilamentCleanerMock.Clear invocations
func (mmClear *FilamentCleanerMock) ClearAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmClear.afterClearCounter)
}

// ClearBeforeCounter returns a count of FilamentCleanerMock.Clear invocations
func (mmClear *FilamentCleanerMock) ClearBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmClear.beforeClearCounter)
}

// Calls returns a list of arguments used in each call to FilamentCleanerMock.Clear.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmClear *mFilamentCleanerMockClear) Calls() []*FilamentCleanerMockClearParams {
	mmClear.mutex.RLock()

	argCopy := make([]*FilamentCleanerMockClearParams, len(mmClear.callArgs))
	copy(argCopy, mmClear.callArgs)

	mmClear.mutex.RUnlock()

	return argCopy
}

// MinimockClearDone returns true if the count of the Clear invocations corresponds
// the number of defined expectations
func (m *FilamentCleanerMock) MinimockClearDone() bool {
	for _, e := range m.ClearMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ClearMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterClearCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcClear != nil && mm_atomic.LoadUint64(&m.afterClearCounter) < 1 {
		return false
	}
	return true
}

// MinimockClearInspect logs each unmet expectation
func (m *FilamentCleanerMock) MinimockClearInspect() {
	for _, e := range m.ClearMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to FilamentCleanerMock.Clear with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ClearMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterClearCounter) < 1 {
		if m.ClearMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to FilamentCleanerMock.Clear")
		} else {
			m.t.Errorf("Expected call to FilamentCleanerMock.Clear with params: %#v", *m.ClearMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcClear != nil && mm_atomic.LoadUint64(&m.afterClearCounter) < 1 {
		m.t.Error("Expected call to FilamentCleanerMock.Clear")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *FilamentCleanerMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockClearInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *FilamentCleanerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *FilamentCleanerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockClearDone()
}
